#!/bin/sh

# Helper/Utilities for working with tmux
#
# Usage: [Options] <Command> [args]
#
# Options:
#   --help        show help
#
# Commands:
#   is 
#       up        is tmux running
#       inside    is this command called from inside a tmux terminal
#
#   list <args>     args: <win>|<sess>
#   ls <opts>       short for list sess
#   lw <opts>       short for list win
#       win         
#           ls 
#       sess

tmuxutil__init(){
    :
}

tmuxutil__main(){
    [ -n "${1:-}" ] || usage

    local cmd
    while [ $# -gt 0 ] ; do
        case "$1" in
            -h|--help) help ; exit 1 ;;
            -*) die "Err: invalid option '$1'";;
            *)  cmd="$1"; shift; break ;;
        esac
        shift
    done 

    [ -n "$cmd" ] || usage

    # cmds
    # new session
    # rename session

    case "$cmd" in
        is) tmuxutil__cmd_is "$@";;
        l|list) tmuxutil__cmd_list "$@";;
        ls) tmuxutil__cmd_list "$@" 'sess';;
        lw) tmuxutil__cmd_list "$@" 'win';;
        get) tmuxutil__cmd_get "$@" ;;
        gw) tmuxutil__cmd_get "$@" 'win';;
        gs) tmuxutil__cmd_get "$@" 'sess';;
        *) die "Err: invalid command '$cmd'" ;; 
    esac

    if [ $? -gt 0 ] ; then
        die "Err: quitting main ..."
    fi
}

tmuxutil__is_up(){
    if tmux 'info' > /dev/null ; then
        echo tmux is running
        return 0
    else
        fail "(tmuxutil__is_up): tmux is not running"
        return 1
    fi
}

tmuxutil__is_inside(){

    tmuxutil__is_up > /dev/null || {
        fail "(tmuxutil__is_inside): tmuxutil__is_up failed"
        return 1
    }

    if [ -z "${TERM_PROGRAM+x}" ]; then  
        fail "(tmuxutil__is_inside): cannot check for TERM_PROGRAM, maybe tmux is too old"
        return 1
    fi

    if [ "$TERM_PROGRAM" = tmux ]; then
        echo 'Inside tmux'
        return 0
    else
        fail '(tmuxutil__is_inside): Not inside tmux'
        return 1
    fi
}
tmuxutil__cmd_get(){

    local arg
    local opt_session
    while [ $# -gt 0 ] ; do
        case "$1" in
            -*) fail "(tmuxutil__cmd_get) : invalid option '$1'"
                return 1;;
            *) arg="$1"; shift; break ;;
        esac
        shift
    done 

    tmuxutil__is_up > /dev/null 2>&1 || {
        fail "(tmuxutil__cmd_get): tmuxutil__is_up failed"
        return 1
    }

    if [ -n "$arg" ] ; then
        case "$arg" in
            sess|session)  tmux display-message -p '#S';;
            win|window)  tmux display-message -p '#W';;
            sesswin|session:window)  tmux display-message -p '#S:#W';;
            *) 
                fail "(tmuxutil__cmd_get): invalid arg '$arg'"
                return 1;;
        esac
    else
        tmux display-message -p '#S:#W'
    fi

}
tmuxutil__cmd_list(){

    local arg
    local opt_session
    while [ $# -gt 0 ] ; do
        case "$1" in
            -s|--sess) 
                opt_session="${2:-}"
                if [ -z "$opt_session" ] ; then
                    fail "(tmuxutil_cmd_list) : session arg is empty"
                    return 1
                fi
                shift
                ;;
            -*) fail "(tmuxutil__cmd_list): invalid option '$1'"
                return 1;;
            *) arg="$1"; shift; break ;;
        esac
        shift
    done 

    if [ -z "$arg" ]; then
        fail "(tmuxutil__cmd_list): no arg"
        return 1 
    fi

    tmuxutil__is_up > /dev/null || {
        fail "(tmuxutil__cmd_list): tmuxutil__is_up failed"
        return 1
    }

    case "$arg" in
        sess|session) tmux list-sessions ;;
        win|window)  
            {
            if [ -n "$opt_session" ] ; then
                tmux list-windows -t "$opt_session" 
            else
                tmux list-windows 
            fi
        } | perl -ne '/^\d+:\s+([\w\*\-\_\.\s]+)\s\(/; print "$1"'
        ;;
        *) fail "Err: invalid arg '$arg'"
            return 1
            ;;
    esac
}

tmuxutil__cmd_is(){

    local arg
    local option
    while [ $# -gt 0 ] ; do
        case "$1" in
            -*) fail "(cmd__is): invalid option '$1'"
                return 1;;
            *) arg="$1"; shift; break ;;
        esac
        shift
    done 


    if [ -z "$arg" ]; then
        fail "Err(cmd_is): no arg"
        return 1
    fi

    case "$arg" in
        up) tmuxutil__is_up ;;
        inside) tmuxutil__is_inside ;;
        *)
            fail "(cmd_is): invalid account"
            return 1;;
    esac
}




######## Prelude

prn(){ printf "%s" "$@"; }
info(){ echo "$@" >&2;  }
die(){ echo "$@" >&2; exit 1; }
fail(){ printf "Fail %s\n" "$@" 1>&2; }

help(){ perl -ne 'print "$1\n" if /^\s*#\s+(.*)/; exit if /^\s*[^#\s]+/;' "$0"; }
usage(){ help | grep Usage 1>&2 ; die "or: --help" ; }
absdir(){ 
    local fso="${1:-}"
    local absdir
    if [ -f "$fso" ] ; then 
        local fsod; fsod="$(dirname "$fso" 2>/dev/null)"  || { 
            fail "(absdir) could not get dirname"
            return 1
        }
        absdir="$(cd "$fsod" && pwd -P)" || { fail "(absdir), from file" ; return 1; }
    elif [ -d "$fso" ] ; then 
        absdir; absdir="$(cd "$fso" 2>/dev/null && pwd -P)" || { fail "absdir" ; return 1; }
    else 
        fail "(absdir): invalid filesystem object (file/dir) under '$fso'"
        return 1
    fi
    if [ -n "$absdir" ] ; then
        prn "$absdir"
    else
        fail "(absdir): empty"
        return 1
    fi
}

libpath(){
    local lib="${1:-}"; local pkg="${2:-}"; local version="${3:-}"
    local lib_str
    case $# in 3) lib_str="$pkg/${lib%.*}/${lib%.*}_${version}.${lib##*.}" ;; 2) lib_str="$pkg/${lib}";; 1) lib_str="${lib}";; esac
    if [ -z "$lib_str" ]; then
        fail  "(libpath): could not set lib_str, wron number of args"
        return 1
    fi
    local lib_path
    for dir in "${MAINDIR:-}" ${BKB_LIBRARY_PATH:-} "$HOME/.local/bkblib"; do
        if [ -f "$dir/$lib_str" ]; then lib_path="$dir/$lib_str";  BKB_LIBS="${lib},${lib_str} ${BKB_LIBS:-}"; break ; fi
    done
    [ -f "${lib_path:-}" ] || {
        fail "(libpath): could not find lib for '$lib'" 
        return 1
    }
    prn "${lib_path}"
}

loadlib(){ # for foolib.sh modulino.dash 
    local lib="${1:-}";
    case "${lib:-}" in *lib.sh|*.dash) : ;; *) fail "loadlib: not a valid lib '${lib:-}'"; return 1 ;; esac
    local lib_str
    for l in ${BKB_LIBS:-}; do 
        if [ "${l%,*}" = "$lib" ]; then
            if [ "${l##*,}" = "$lib_str" ]; then  return 0; else info "Warn: lib '$lib' loaded,  '$lib_str' not loaded"; return 1; fi
        fi
    done
    local lib_path; lib_path="$(libpath "$@")" || { fail "loudlib: library not loaded '$lib'" ; return 1; }
    . "$lib_path" || { fail "loadlib: could not load '$lib_path'" ; return 1; }
}


if [ -z "${MAINDIR:-}" ] ; then
    MAINDIR="$(absdir "$0")" || die "Err: could not set MAINDIR"
    tmuxutil__init && tmuxutil__main "$@"  || die "Err: exiting ..."
else
    tmuxutil__init || { 
        fail "(tmuxutil__init): could not init"
        return 1
    }
fi
